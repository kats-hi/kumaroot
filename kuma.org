#+title:KumaROOT
#+author:しょーた

* はじめに

  これまで古巣の研究室に設置したDokuWikiにROOTなどの情報を書きためてい
  ましたが、そろそろ引っ越しをしなくてはいけないかもしれません。せっか
  く書きためたのでどうにかして残しておきたいのですが、いまの職場のサー
  バではPHPなどが一切動かないため、GitHubにて公開することにしました。

  GitHubで公開するということで、動作するサンプルコードも作成して
  いこうと思います。

  「くまROOT」と名づけたのは、私がROOTを使い始めたときに、最初に目を通
  した「猿にも使えるROOT」（通称：さるROOT）の知名度にあやかりたかった
  ためです。「さる」の次は「くま」を読んでもらえるように頑張りたいと思います。

  ということで、読者は、ちょっとだけROOTを使ったことがある学生／研究者
  が対象になると思います。できるだけ「逆引き辞典」として使えるようにし
  たいと思います。


** ROOTについて

   「ROOT」とは高エネルギー物理学業界で広く使われている解析フレームワー
   クです。CERNが中心になって開発されています。

   「解析」フレームワークと聞くとたいそうに聞こえますが、お絵かき（＝
   グラフ作成をそれなりにきれいに出力）ソフトと思えば気構えずに使える
   と思います。（当たり前ですが「解析」するのは自分ですしね）

   あと、ROOTを使うにあたり注意事項は一つです。「決して深入りしないこ
   と」。どうにもならん部分は「仕様」と思って諦めましょう。


* 参考サイト

  このKumaROOTに集めた情報は、下記のサイトにたいへんお世話になっています。

  - [[http://root.cern.ch/drupal/content/users-guide][ROOT公式ユーザーズガイド]] :: 困ったらとりあえず読む！
  - [[http://root.cern.ch/drupal/content/reference-guide][ROOT公式リファレンスガイド]] :: クラス名やそのメソッド名、内容、使い方を知りたい場合に使うべし！
  - [[http://root.cern.ch/root/html/tutorials/][ROOT公式チュートリアル]] :: 付属のサンプルコードを試すべし！
  - [[http://root.cern.ch/drupal/content/c-coding-conventions][ROOT公式コーディングガイド]] :: ROOTのソースコードを読むときに役に立つかも
  - [[http://hep.planet-koo.com/index.php?g=root][ROOT解体新書]] by 楠本さん :: gROOTとか、gStyleの設定など、他のページ／マニュアルでは見られない項目がすごく詳しい
  - [[http://blog.livedoor.jp/oxon/][宇宙線実験の覚え書き（ライブドアブログ）]] by 奥村さん :: PyROOTのこ
       とをググるとたいていこのページに辿り着くはず。いまは [[http://oxon.hatenablog.com][宇宙線実験
       の覚え書き（はてブ）]] にお引っ越ししたみたいです [fn::実際はもっと
       青い色の頁にお世話になってたはずなんだけど、うまく探せず]。


* ROOTを使いたい

** オススメのインストール方法（for Mac ユーザ）

   #+begin_src sh
   $ sudo port install root    ## 実際にはroot5 がインストールされる
   #+end_src

   さて、まずはインストールしないとはじまりません。Macの場合はMacPorts
   からインストールできるようになっています。すごく楽ちんなのでオススメ
   です。環境変数（$ROOTSYS、$LD_LIBRARY_PATH、$DYLD_LIBRARY_PATHなど）
   の設定も不要です。（Homebrewは使っていないので分かりません。誰か情報
   をください。）

*** Git を使ったインストール方法

    Linuxを使っている場合は、Gitを使うとよいでしょう。
    方法は「[[https://root.cern.ch/drupal/content/installing-root-source][installing-root-source | ROOT公式ページ]]」に載っている通りです。

    #+begin_src sh
    ## STEP1 : clone先のディレクトリを作成する（ここはお好み）
    [any]  $ mkdir ~/repos/git
    [any]  $ cd ~/repos/git

    ## STEP2 : ROOT本体をcloneする
    [git]  $ git clone http://root.cern.ch/git/root.git
    [git]  $ cd root

    ## STEP3 : 目的のバージョンのタグを探す
    [root] $ git tag -l

    ## STEP4 : 目的のバージョンのタグをチェックアウトする
    [root] $ git checkout -b v5-34-08 v5-34-08

    ## STEP5 : PREFIXを指定しconfigure -> make -> make install する
    [root(v5-34-08)] $ ./configure --prefix=/usr/local/heplib/ROOT/v5-34-08
    [root(v5-34-08)] $ make 2>&1 | tee make.log                   ## make時のログを残すようにする
    [root(v5-34-08)] $ make install 2>&1 | tee makeinstall.log    ## configureで設定したprefixにインストールされる
    #+end_src

    まず、本体をどこかにcloneします（今回は、~/repos/git/ 以下）。次に
    どんなタグがあるのかを調べます。目的のバージョンのタグ名が分かった
    ら、そのタグをチェックアウトします。ブランチ名は好きにしてかまいま
    せん（今回は、タグ名と同じ名前）。あとは、従来通りPREFIXを指定して
    configureします。configure の内容は たしか config.status に書きださ
    れます。make、make install の際、PREFIXで指定したディレクトリによっ
    ては sudo が必要です。また、失敗した場合に備えてログを残しておくと
    よいです。今回は、teeコマンドを使うことで、端末に表示しながらログファ
    イルに保存しています。

    あとは、~/.bashrc に環境変数の設定を書いておきます。

*** 従来のインストール方法

    ググればたくさん出てきますが、一応紹介しておきます。

    #+begin_src sh
## STEP1 : ソース（tar.gz）を保存するディレクトリに移動し、wgetで取ってくる
$ cd /usr/local/heplib/tarballs
$ wget ftp://root.cern.ch/root/root_v5.30.06.source.tar.gz    ## URLはROOT公式WEBから探してくる

## STEP2 : ソース（tar.gz）を展開する
[ROOT] $ cd /usr/loca/heplib/ROOT
[ROOT] $ tar zxvf ../tarballs/root_v5.30.06.source.tar.gz    ## 先ほどwgetしたファイルを展開

## STEP3 : PREFIXを指定しconfigure -> make -> make install
[ROOT] $ cd root
[root] $ ./configure --prefix=/usr/local/heplib/ROOT/v5-30-06
[root] $ make 2>&1 | tee make.log
[root] $ make install 2>&1 | tee makeinstall.log
    #+end_src

*** インストール方法 for Windows ユーザ

    Windowsはよく分かりません。ごめんなさい。たぶん
    「[[https://root.cern.ch/drupal/content/downloading-root|downloading-root |
    ROOT公式ページ]]」から目的のバージョンを選び、そこからバイナリを落とし
    てくるのが一番簡単だと思います。

** ROOT6を使いたい

   #+begin_src sh
$ sudo port install root6
   #+end_src

   2014年にROOT6がリリースされました。MacPortsの場合「root6」というパッ
   ケージ名[fn::正確には「ポート名」かも。あまり気にしないでください。]でインストールすることができます。

   ただし、現在遂行中の実験は得てしてROOT5系であることが多いです。
   郷に入っては郷に従え、と言うように周りで使われている環境に合わせるのが無難です。

** ROOT5 と ROOT6 を試してみたい

   #+BEGIN_SRC sh
$ sudo port select --set root root6   ## ROOT6にする
$ sudo port select --set root root5   ## ROOT5にする
   #+END_SRC

   MacPortsでROOTをインストールする利点は、ROOT5 と ROOT6 が簡単に切り
   替えられることです。

   実はこの「port select」はROOTだけでなく、Pythonのバージョン切り替えなどもできます。
   どのパッケージが使えるかは以下のコマンドで確認できます

   #+begin_src sh
$ port select --summary
   #+end_src


*** ROOT5 と ROOT6 の違いについて

    ROOTマクロなどを実行する際に使うインタプリタが変更されたみたいです[fn::CINT->CINT++に変更]。
    細かい違いは全く分かりませんが、文法のチェックが厳密になったみたいです。

    実はROOT5ではC言語／C++言語の文法的には間違っているマクロでも動い
    てくれました[fn::よく知られていると思われるのは、a.b でも a->b
    でも動いちゃうことでしょうか]。そのため、テストで作ったマクロで動
    作確認した後、より多くのデータを解析するためにコンパイルするとエラー
    が多出。そのデバッグに追われるということは日常茶飯事でした。

    ROOT6では、このマクロの文法チェックも厳しくなったみたいです。ひぇぇ。
    でも心配しなくて大丈夫。エラーの内容を詳しく教えてくれるようになり
    ました。よくある行末のセミコロンのつけ忘れなども指摘してくれます。
    これで場所の分からない segmentation fault に悩まされることも減るで
    しょう。

    試しに、ROOT5のチュートリアルをROOT6で実行してみてください。
    「warning」や「error」がたくさん表示されます。

    #+begin_src sh
## STEP1 : ROOT6を指定
$ sudo port select root root6

## STEP2 : ## ROOT5のtutorials/に移動
$ cd /opt/local/libexec/root5/share/doc/root/tutorials/

## STEP3 : ROOT（=ROOT6）を起動
$ root

## ===  warning の例 ===
/opt/local/libexec/root5/share/doc/root/tutorials/rootalias.C:7:13:
 warning: using the result of an assignment as a condition without
 parentheses [-Wparentheses]
      if (e = getenv("EDITOR"))
          ~~^~~~~~~~~~~~~~~~~~
## === error の例 ===

/opt/local/libexec/root5/share/doc/root/tutorials/rootalias.C:39:12:
 error: cannot initialize return object of type 'char *' with an rvalue of
 type 'const char *'
    return gSystem->WorkingDirectory();
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~

$ .q
    #+end_src

** PyROOTを使いたい

   #+begin_src sh
$ sudo port install root5 +python27   ## ROOT5の場合、+pythonXX の variants が必要
$ sudo port install root6             ## ROOT6の場合、variants 不要
   #+END_SRC

   CERNには「へびつかい」が多いらしく、「PyROOT」というモジュールを使
   えば、Python上でROOTが使えるようになっています。

   その場合は、MacPortsでインストールする際に variants で指定する必要
   があります。しかも、この variantsは自分の使っているPythonのバージョ
   ンに合わせる必要があります。ミスマッチな場合は、動作しません（＝ク
   ラッシュします）。

   ROOT6の場合はpython27 がデフォルトでONになっています。

** EmacsでROOTを編集したい

   #+begin_src sh
$ locate root-help.el    # どこにあるかを探す
   #+end_src


   これもあまり知られていないと思うのですが、Emacs上でROOTのソースを編
   集するのを簡単にするElispパッケージが一緒にインストールされます。
   locateコマンドでどこにあるか調べておきましょう。

   ちなみに、僕の場合（＝MacPortsの場合）、以下にありました。

   #+begin_src sh
/opt/local/libexec/root5/share/emacs/site-lisp/root-help.el
/opt/local/libexec/root6/share/emacs/site-lisp/root-help.el
   #+end_src

   これの使い方に関しては、あとできちんと調べて書くことにします。

** ROOTのtutorialを使いたい

   #+begin_src sh
/opt/local/libexec/root5/share/doc/root/tutorials/     ## ROOT5の場合
/opt/local/libexec/root6/share/doc/root/tutorials/     ## ROOT6の場合
   #+end_src

   実はROOTをインストールすると、たくさんのサンプルコードもついてきま
   す。使い方をウェブで検索してもよく分からない場合は、このサンプルコー
   ドを動かしながら中身をいじくってみるのが一番です。

   とりあえず、いつでも使えるようにテスト用ディレクトリを作成しコピー
   しておきましょう。以下に一例を示しましたが、自分の環境に合わせて適
   宜変更してください。

   #+begin_src sh
$ cp -r /opt/local/libexec/root5/share/doc/root/tutorials ~/TEST/root5/
$ cp -r /opt/local/libexec/root6/share/doc/root/tutorials ~/TEST/root6/
   #+end_src

   cp コマンドを使う際には、-r オプションを付けることでサブディレクト
   リもコピーできます。その際、コピー元（＝第１引数）の最後に「/」付け
   てはいけません。コピー先（＝第２引数）の最後には「/」を付けてもよい
   です（もしかしたらなくてもよいのかも）[fn::この辺はよく忘れます。失
   敗したらコピー先を削除すればいいだけなので、失敗もしてみてください]。

* ROOT tutorial 編

  この章ではROOTに付属しているtutorialの使い方を簡単に紹介します。
  前節の最後にも書きましたが、手元にコピーを作っておきましょう。

  #+begin_src sh
$ cp -r /opt/local/libexec/root6/share/doc/root/tutorials ~/TEST/root6/
  #+end_src

  とりあえずROOT6のtutorialを使います。気が向いたらROOT5との比較もしよ
  うかと思います。

** とりあえず起動

   #+begin_src sh
$ cd ~/TEST/root6/tutorials/
$ root

Welcome to the ROOT tutorials

Type ".x demos.C" to get a toolbar from which to execute the demos

Type ".x demoshelp.C" to see the help window

==> Many tutorials use the file hsimple.root produced by hsimple.C
==> It is recommended to execute hsimple.C before any other script

root [0]
   #+end_src

   tutorials をコピーしたディレクトリでROOTを起動すると、上のメッセージが表示されます。
   これは同じディレクトリに rootlogon.C というのがあるからです。

   ROOTを起動すると、"system.rootrc"、"~/.rootrc"、"./rootlogon.C" の順番に設定が読み込まれます。
   なので、個人的な全体設定は"~/.rootrc"へ、そのプログラムだけの設定は"./rootlogon.C"に書いておけばよいです。

** とりあえず終了

   #+begin_src sh
root [0] .q

Taking a break from ROOT? Hope to see you back!
   #+end_src

   さて、さきほどROOTセッションを終了してみましょう。ROOTセッション内
   で「.q」を入力します[fn::自作マクロが途中で止まってしまい、.qでは抜
   けれないことがあります。そんなときは .qqq のようにqをたくさん入力し
   てみましょう。それでもダメな場合は、Ctrl-z で一時中断してプロセ
   スをkillします（「$ ps aux | grep root」でPIDを調べ、「$ kill -9
   PID」で強制終了）]。するとまたまたメッセージが表示されます。これは
   ./rootlogoff.C があるからです。

   このようにして、ROOT起動時および終了時の動作を細かく設定することができます。
   個人的には、数ヶ月ぶりに触るプログラムなんてほとんど忘れてしまっているので、
   rootlogon.C に手順を書いて残したりしています。


** demos.Cを実行してみる

   さて、ROOTを起動して表示されたメッセージにしたがって、demos.C を実行してみましょう。
   ROOT内で実行する場合は、「.x ファイル名」と入力します。ファイル名の部分はTAB補完ができます。
   これをbashで実行する場合は以下のようにします。

   #+begin_src sh
$ root demos.C
   #+end_src

   さてさて、実行すると図[[fig:demos]]のようなツールバーが出てきます。

   #+attr_latex: :height 10cm
   #+name: fig:demos
   #+caption: demos.Cを実行した時に出てくるツールバー的なもの
   [[./fig/demos.png]]


   そして、一番上にある、「Help Demos」をクリックすると、図[[fig:helpdemos]]のようなキャンバスが表示されます。

   #+attr_latex: :height 10cm :mode hoge
   #+name: fig:helpdemos
   #+caption: Help Demos を実行すると出てくるキャンバス
   [[./fig/helpdemos.png]]



* 全体設定編
** 初期設定したい

*** rootrc

    bashの設定を ~/.bashrc に書くように、ROOTの設定は ~/.rootrc に書き
    ます。デフォルト値は、{ROOTをインストールしたパス}/etc/system.rootrc
    に書かれているので、とりあえずこれをホームディレクトリにコピーして
    編集したらOKです。

#+begin_src sh
$ locate system.root
# $ROOTSYS/etc/system.rootrc
$ cp $ROOTSYS/etc/system.rootrc ~/.rootrc
#+end_src

*** rootlogon.C


** キャンバスを無地にしたい

#+begin_src c++
gROOT->SetStyle("Plain");
#+end_src

   ROOT v5.30 からキャンバスの色がデフォルトで無地になりました。
   なので、それ以降のバージョンを使っている場合、特に設定は必要ありません。

   （いないと思いますが）昔のキャンバス（＝灰色っぽいやつ）を使いたい場
   合は、"Classic"を指定します。

** 統計情報を表示したい


   ヒストグラムを描画すると、右上にそのヒストグラムの情報が表示されます。
   デフォルトだと３つしか表示されないので、少し増やしておきます。

#+begin_src c++
gStyle->SetOptStat(112211)
#+end_src

   引数はビットのようなものを表しています。
   このビットは右から読まれます。最大で９くらいまでいける気がする。
   0 or 書かなければ「非表示」、1は「表示」、2は「エラー表示」です。


** フィットの結果を表示したい

#+begin_src c++
gStyle->SetOptFit(1111111)
#+end_src

   ビットの使い方は、ひとつ前の「統計情報を表示したい」と同じです。


** ヒストグラムの線の太さを一括で変更したい

   ヒストグラムの外枠線の太さは、一括で設定しておくことができます。デ
   フォルトだと少し細い気がするので、太くしておくとよいと思います。た
   だし、たくさんのヒストグラムを描く際は、見えにくくなってしまうので
   細くします。その辺りは臨機応変にお願いします。

#+begin_src
gStyle->SetHistLineWidth(2)
#+end_src

** デフォルトの色を変更したい

#+begin_src c++
gROOT->GetColor(3)->SetRGB(0., 0.7, 0.); // Green  (0, 1, 0)->(0, 0.7, 0)
gROOT->GetColor(5)->SetRGB(1., 0.5, 0.); // Yellow (1, 1, 0)->(1, 0.5, 0)
gROOT->GetColor(7)->SetRGB(0.6, 0.3, 0.6); // Cyan (0, 1, 1)->(0.6, 0.3, 0.6)
#+end_src

   デフォルトは（1:黒, 2:赤, 3:黄, 4:青, 5:黄緑, 6:マゼンダ, 7:シアン）なのですが、
   この中で、（3:黄, 5:黄緑, 7:シアン）は明るすぎてとても見えづらいので、
   もう少し見やすい色に変更します。

   上２つは奥村さんのページのコピペ、最後のはシアンを紫っぽい色に変更しました。

   RGBの度合いは自分の好みで選んでください。
   手順としては、RGBの値を検索（Wikipedia使用すると良い）→ その値を256（ほんとは255かも？）で割るだけです。

   おまけとして、ROOT公式ブログの「[[http://root.cern.ch/drupal/content/rainbow-color-map][虹色カラーマップを使うこと]]」 の記事もリンクしておきます。


** 横軸に時間を使いたい

   #+begin_src C++
   gStyle->SetTimeOffset(-788918400);    // Unix時間とROOT時間のepochの差
   graph->GetXaxis()->SetTimeDisplay(1);
   graph->GetXaxis()->SetTimeFormat("%Y\/%m\/%d");
   graph->GetXaxis()->SetTimeOffset(0, "gmt");    // GMT+0に設定
   #+end_src

   Unixのepoch time は1970年01月01日00時00分00秒から始まるのに対し、
   ROOTのepoch time は1995年01月01日00時00分00秒から始まるので、
   その差をオフセットとして設定する必要がある。

*** Unix epoch と ROOTepochの差を計算する

    簡単な計算なので確かめてみる

    #+begin_src text
    25[年] * 365[日/年] * 24[時間/日] * 60[分/時間] * 60[秒/分]
    + 6[日] * 24[時間/日] * 60[分/時間] * 60[秒/分]    // この25年間に閏年は6回
    = 788918400[秒]
    #+end_src

*** GMT+0に設定する

    #+begin_src C++
    graph->GetXaxis()->SetTimeOffset(0, "gmt");
    #+end_src

    理由は忘れてしまったが、上の設定をしないと軸の時間がずれてしまってたはず。
    epochの時間ではなく、作成したグラフ／ヒストグラムの軸に対して設定する

*** 月日と時刻を2段にして表示したい

    #+begin_src C++
    graph->GetXaxis()->SetTimeFormat("#splitline{/%m\/%d}{%H:%M}");
    #+end_src

    時間に対する安定性を示したい場合などに使える。


** キャンバスに補助線を描きたい

   #+begin_src C++
   gStyle->SetPadGridX(1)    // X軸のグリッド
   gStyle->SetPadGridY(1)    // Y軸のグリッド
   #+end_src


** グラフの軸を一括してログ表示にする

   #+begin_src C++
   gStyle->SetOptLogx(1)    // X軸の目盛をログ表示
   gStyle->SetOptLogy(1)    // Y軸の目盛をログ表示
   #+end_src


** 軸の目盛り間隔を変更したい

   #+begin_src C++
   gStyle->SetNdivisions(TTSSPP)
   // PP --- 軸を何分割するか
   // SS --- PP分割された目盛り１つ分を何分割するか
   // TT --- SS分割された目盛り１つ分を何分割するか
   #+end_src

   デフォルトは510になっている。
   PP=10、SS=05、TT=00なので、軸を10分割してその１目盛りを5分割、ということで全体で50目盛りになる。

   全体を100目盛りにするには、20510にすればよい。
   （10分割、その１目盛りを5分割、さらにその1目盛りを2分割 ＝100目盛り）


* ヒストグラム編

** １次元ヒストグラムを作成したい

#+begin_src c++
TString hname, htitle;
hname.Form("hname");    // <------------------------ ヒストグラムの名前
htitle.Form("title;xtitle;ytitle;");    // <-------- タイトル、軸名
Double_t xmin = 0, xmax = 10;    // <--------------- 左端、右端
Int_t xbin = (Int_t)xmax - (Int_t)xmin;    // <----- ビン数

TH1D *h1 = new TH1D(hname.Data(), htitle.Data(), xbin, xmin, xmax);
#+end_src

   - ヒストグラムに限らずROOTオブジェクトには「名前」をセットする必要がある
   - タイトル部分を「;」で区切ることで、軸名を設定することができる（"タイトル;X軸名;Y軸名前"）
   - TString::Form は printf の書式が使えるのでとても便利

** タイトルを変更したい

** 統計ボックスを表示したい

** X軸名を設定したい

** タイトルを中心にしたい

** 平均値、RMSを知りたい

** 値を詰めたい

** 面積でノーマライズしたい

* TTree編

  ROOTを使うにあたって、TTree（もしくは次の章のTChain）は基礎中の基礎
  です[fn::「さるROOT」や、他のウェブサイトでは「TNtuple」をサンプル
  として取り上げていますが、これだけを使っている研究者はみたことがあり
  ません。TTreeのベースにはTNtupleがあるのかもしれませんが、なんでこん
  な使われていないものをサンプルにするのか疑問です]。
  とりあえず、取得したデータはさっさとTTreeに変換してしまいましょう。


** テキストファイルをTTreeに変換したい

   取得したデータはテキストデータとして保存するのが、一番簡単な方法です。

   仮に、100行４列のテキストファイルがあるとします。
   このファイルの「行数」はイベント数に相当し、「列数」は取得したデータの項目に相当します。

#+begin_src text
100    105    104   103
101    106    103   100
...
#+end_src


*** TTree::ReadFile() を使う方法

    データがテキストファイルで保存されている場合、
    それをTTreeに変換する最も簡単な方法です。

#+begin_src c++
void tree_using_readfile()
{
  TString ifn = "inputfilename";
  TTree *tree = new TTree("tree", "tree using ReadFile()");
  tree->ReadFile(ifn, "row1/I:row2/I:row3/I:row4/D:row5/I");

  TString ofn = "out.root";
  TFile *fout = new TFile(ofn, "recreate");
  tree->Write();
  fout->Close();

  return;
}
#+end_src

    TTree::ReadFile()の第2引数には、branchDescriptorの変数をコロン（:）で区切って記述すします。
    「ブランチ名/I」、「ブランチ名/D」といった感じで、その変数名（＝ブランチ名）とその型を指定できます。
    型を省略した場合は「ブランチ名/F」になるみたいです。

*** TTree::Branch() を使う方法

    一番ありがちな方法です。ググればいっぱい見つかります。

#+begin_src c++
void tree_using_branch()
{
    // データファイルを読み込む
    TString ifn = "inputfilename"
    ifstream fin;
    fin.open(ifn);

    // データを格納するための変数
    int val1, val2, val3, val4;

    // TTreeを作成する
    // TTree::Branch(...)を使って、各変数のブランチを作成する
    // 第一引数：ブランチ名；なんでも良い；用意した変数名と違っていても構わない
    // 第二引数：変数のアドレス；変数が実体の場合は、&を先頭につけてアドレスを指定する；事前に変数を用意しておかないと怒られる
    // 第三引数：変数の型；"変数／型"の形で記述する；int型はI, float型はF, double型はFなど
    TTree *tree = new TTree("name", "title);
    tree->Branch("val1", &val1, "val1/I");
    tree->Branch("val2", &val2, "val2/I");
    tree->Branch("val3", &val3, "val3/I");
    tree->Branch("val4", &val4, "val4/I");

    // C++でファイルを読み込むときの常套手段
    while (fin >> val1 >> val2 >> val3 >> val4) {
        tree->Fill();  // データのエントリの区切りで必ずTTree::Fill()する
    }

    // 作成したTTreeを保存するためのROOTファイルを準備する
    TString ofn = "outputfilename";
    TFile *fout = new TFile(ofn, "recreate");
    tree->Write();  // TFileを開いた状態で、TTree::Write()すれば書き込みできる；違うファイルに書き込みたい場合は後述するかも
    fout->Close();  // 最後にファイルを閉じる；プログラム（やマクロ）終了時に勝手に閉じてくれるらしいが一応
    return;
}
#+end_src

    前述したReadFile を使った方法と比べると、コードの行数がぐーんと多
    いことが分かります。（ReadFileの場合、肝となる部分はたったの一行で
    す）。

    行数が増えた分、汎用性が高くなっています。
    こちらの方法だと、ブランチに「配列」を設定することも可能です。

* TChain編
* TFile編
* TCanvas編
* TLegend編
* TString編

* その他

  ここでは、ROOT以外の研究で役に立ちそうなことについてまとめます。

** Emacs

   最初に断っておくと、特にEmacs信者というつもりはないのです。修士でプ
   ログラミングを始めた時に、最初に使ったのがEmacsだったというだけの理
   由[fn::MacのCocoaアプリもEmacsキーバインドで使えるのも大きな理由だっ
   たかもです]です。Vimも基本操作はできるようにしといた方がよいです。


*** ページ操作

    #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
    | Emacs      | vim     | less   | 操作内容                   |
    | C-n        | j, RET  | j, RET | 次の行                     |
    | C-p        | k       | k      | 前の行                     |
    | C-v        | C-f     | SPC    | １ページ進む               |
    | M-v        | C-b     | S-SPC  | １ページ戻る               |
    | M-<        | gg      | g      | ファイルの先頭             |
    | M->        | G       | G      | ファイルの最後             |
    | M-g g 数値 | 数値 G  | :数値  | 指定した数値の行へジャンプ |
    |            |         | d      | 半ページ進む               |
    |            |         | u      | 半ページ戻る               |
    | C-x C-c    | :q, :q! | q      | ファイルを閉じる           |

*** エディタ共通

    #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
    | Emacs                                       | vim            | 操作内容                                                                                                                                                                                |
    | C-f                                         | l, SPC         | 次の文字                                                                                                                                                                                |
    | C-b                                         | h              | 前の文字                                                                                                                                                                                |
    | M-f                                         | w, e           | 次の単語[fn::Emacsの場合、[[https://github.com/zk-phi/jaword][jawordパッケージ]] を導入すると日本語の単語移動が賢くなります]                                                                                                  |
    | M-b                                         | b              | 前の単語                                                                                                                                                                                |
    | C-a                                         | 0              | 行頭                                                                                                                                                                                    |
    |                                             | ^              | 文頭（行頭にある文字）                                                                                                                                                                  |
    | C-e                                         | $              | 行末                                                                                                                                                                                    |
    | C-i                                         |                | タブ（インデント？）                                                                                                                                                                    |
    | C-l                                         |                | 画面の移動（上-中-下）                                                                                                                                                                  |
    | C-x C-s                                     | :w             | ファイルを保存                                                                                                                                                                          |
    | C-x C-w                                     | :w ファイル名  | ファイル名を指定して保存                                                                                                                                                                |
    | C-x C-i                                     | :r ファイル名  | ファイル名の中身を挿入                                                                                                                                                                  |
    | C-d                                         | x              | カーソルの下の文字を削除（Delete）                                                                                                                                                      |
    | C-h[fn::元々はHelpですが、置き換えています] | Backspace      | カーソルの左の文字を削除（Backspace）                                                                                                                                                   |
    | C-k                                         | d$             | カーソルの位置から行末までを切り取り                                                                                                                                                    |
    | C-w                                         | d$, dd, dw     | 選択範囲を切り取り                                                                                                                                                                      |
    |                                             | dd             | 一行削除（切り取り）                                                                                                                                                                    |
    |                                             | dw             | １単語を切り取り                                                                                                                                                                        |
    |                                             | d$, d^, d0     | それぞれ切り取り                                                                                                                                                                        |
    | M-w                                         | y              | 選択範囲をコピー（yank）                                                                                                                                                                |
    |                                             | yy             | 一行コピー（yank）                                                                                                                                                                      |
    |                                             | yw             | １単語をコピー（yank）                                                                                                                                                                  |
    |                                             | y$, y^, y0     | それぞれコピー（yank）                                                                                                                                                                  |
    | C-y                                         | p              | 貼り付け                                                                                                                                                                                |
    | C-s                                         | /文字, n, C-i  | 前方検索 [fn::Emacsの場合、[[https://github.com/koron/cmigemo][cmigemo]] と [[https://github.com/emacs-jp/migemo][migemoパッケージ]] を導入するとローマ字で日本語検索が可能になります。インストールと設定の詳細は [[http://rubikitch.com/2014/08/20/migemo/][るびきち「日刊Emacs」]] を参考にするとよいと思います] |
    | C-r                                         | ?文字, N, C-o  | 後方検索                                                                                                                                                                                |
    | C-@                                         | v              | マーカーのセット                                                                                                                                                                        |
    | M-%                                         | :s/old/new     | 現在行の最初の文字を置換（old -> new）                                                                                                                                                  |
    |                                             | :s/old/new/g   | 現在行のすべての文字を置換（old -> new）                                                                                                                                                |
    |                                             | :%s/old/new/gc | ファイル全体のすべての文字を、確認しながら置換                                                                                                                                          |

*** エディタ特有

    #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
    | Emacs | vim       | 操作内容                                     |
    |       | ESC       | ノーマルモードへ切替                         |
    |       | i         | カーソルの位置に追加                         |
    |       | a         | カーソルの次の位置に追加                     |
    |       | A         | 行末に追加                                   |
    |       | I         | 行頭に追加                                   |
    |       | o         | カーソルの下の行に追加                       |
    |       | O         | カーソルの上の行に追加                       |
    | C-j   |           | 改行                                         |
    | C-o   |           | 改行                                         |
    | C-m   |           | 改行                                         |
    | RET   |           | 改行                                         |
    | C-x u | u         | 直前の動作の取り消し                         |
    |       | U         | 行全体の変更の取り消し                       |
    |       | C-r       | 取り消しの取り消し                           |
    |       | r         | カーソル下の１文字の置換                     |
    |       | R         | カーソル下の複数文字の置換                   |
    |       | cw        | カーソル位置の単語の変更（削除＋挿入）       |
    |       | c$        | カーソル位置から行末までの変更（削除＋挿入） |
    |       | c0        | カーソル位置から行頭までの変更（削除＋挿入） |
    |       | c^        | カーソル位置から文頭までの変更（削除＋挿入） |
    |       | C-g       | ファイル内の位置の表示                       |
    |       | %         | 対応するカッコへ移動                         |
    |       | !コマンド | 外部コマンドを実行                           |




*** Emacs + Org

    Emacsのアウトラインモードです。
    最近のEmacsには標準添付です。
    とても多機能なので、詳しくは「M-x org-info」でドキュメントを参照するとよいです。

*** Emacs + Prelude

    Emacsの設定を一からするのってめんどくさいですよね。
    そんな場合はとりあえずググってみましょう。いろんな人が、いろんな形で公開しています。

    Preludeもその１つで、GitHubで公開されています。いろいろあって違い
    がよく分からなかったので、名前がかっこいいなーと思ってこれに決めま
    した。ほんとそれだけです。

    複数のマシンで同じEmacs設定を使いたい場合は、Preludeを自分のGitHub
    にForkして、Cloneするとよいと思います。

** LaTeX

   ほとんどの人は修論の時にLaTeXをがしがし使うことになると思います。
   その時に「インストールできないー」などと焦るのはしょうもないので、簡単にまとめておきます。

*** MacTeXを使おう

    日本語はマルチバイトコードであるため、LaTeXでコンパイルするのが難しかったみたいです。
    それに対処する歴史的な紆余曲折から日本語版LaTeXにはさまざまな派生品が存在します。
    この歴史の詳細に関しては、三重大学の奥村さんのウェブサイトをはじめ、ググってみるとよいでしょう。

    つい最近までは「Mac LaTeX インストール」などでググると、なんだかまとまりのない情報が溢れていました。
    しかし、現在はそれらを取りまとめようということで開発が進んでいるようで、これからはTeXLive一択で良いみたいです。

    TeXLiveはMacPortsからインストールすることもできますが、うまく設定
    できた試しがありません。なので、[[https://tug.org/mactex/][MacTeX公式ページ]] に置いてある
    MacTeXパッケージをダウンロード[fn::フルパッケージは2GBちょいあるの
    で、ダウンロードに少し時間がかかります。細い回線で行うのはオススメ
    しません]するのが一番簡単で良いと思います。

    MacTeXパッケージを使う利点としては、TeXの統合環境である
    TeXShop[fn::修論の頃はお世話になりました。現在はYaTeXに移行したの
    で全く使っていません]やTeXworks、TeX関連のパッケージ管理ツールであ
    るTeX Live Utility[fn::コマンドラインからtlmgrとして使えます。パッ
    ケージのインストールがとても楽ちん。ただし、TeXLiveのバージョンが上
    がるたびに動かなくなるのでちょっとめんどくさい]、文献管理のBibDesk、
    スペルチェックのExcalibur、そして、Keynoteに数式を貼り付けるのに必
    要なLaTeXiT[fn::これが一番重宝してます]もついてきます。


*** YaTeXを使おう

    さて、前述のようにMacTeXをインストールしたとします。
    MacTeXにはTeXShop.appや他にもいろいろな便利なアプリがついてきます。
    しかし、ここではEmacs+YaTeXを使うことにします。

    http://ichiro-maruta.blogspot.jp/2013/03/latex.html
    http://qiita.com/zr_tex8r/items/5413a29d5276acac3771

** KiNOKO

   CAMACやVMEでデータ収集を行うためのドライバをインストールします。
   詳細に関しては「[[http://www.awa.tohoku.ac.jp/~sanshiro/kinoko/index.html][KiNOKOプロジェクト]]」を参照してください。

#+begin_src
$ cd ~/Downloads/
$ wget http://www.awa.tohoku.ac.jp/~sanshiro/kinoko-download/files/kinoko-2014-01-29.tar.gz
$ tar zxvf kinoko-2014-01-29.tar.gz /usr/local/heplib/
#+end_src

   僕の場合、ダウンロードしたファイルはとりあえず ~/Downloads に保存することにしています。
   また、高エネルギー物理関連のプログラムは /usr/local/heplib/ 以下にインストールすることにしています。

*** CAMACドライバのインストール

*** VMEドライバのインストール

** Geant4
