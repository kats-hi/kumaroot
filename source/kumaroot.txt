#+title:KumaROOT
#+author:しょーた
#+email:  shotakah@post.kek.jp
#+options: H:4

#+latex_class: jsreport
#+latex_header: \hypersetup{bookmarksnumbered=true}
#+latex_header: \hypersetup{bookmarksopen=true}
#+latex_header: \hypersetup{bookmarksopenlevel=2}
#+latex_header: \hypersetup{pdfpagemode=UseOutlines}


# #+latex_class_options: [dvipdfmx, 15pt, report]
#+latex_header: \lstset{language=C++}
# #+latex_header: \lstset{basicstyle=\small}
#+latex_header: \lstset{basicstyle=\scriptsize}
#+latex_header: \lstset{stringstyle=\ttfamily}
#+latex_header: \lstset{commentstyle=\ttfamily}
#+latex_header: \lstset{showstringspaces=false}
#+latex_header: \lstset{frame=shadowbox}
#+latex_header: \lstset{rulesepcolor=\color{black}}
#+latex_header: \lstset{breaklines=true}
#+latex_header: \lstset{tabsize=2}
#+latex_header: \lstset{numbers=left}
#+latex_header: \lstset{numberstyle=\scriptsize}
#+latex_header: \lstset{stepnumber=1}
#+latex_header: \lstset{numbersep=1zw}
#+latex_header: \lstset{fancyvrb=true}
#+latex_header: \fvset{gobble}

#+latex_header: \renewcommand{\familydefault}{\sfdefault}
#+latex_header: \renewcommand{\kanjifamilydefault}{\gtdefault}







* ROOT tutorial 編

  この章では、主にROOTに付属しているtutorialを使用して、使い方を簡単に紹介します。
  前節の最後にも書きましたが、手元にコピーを作っておきましょう。

  #+begin_src sh
$ cp -r /opt/local/libexec/root6/share/doc/root/tutorials ~/TEST/root6/
  #+end_src

  とりあえずROOT6のtutorialを使います。気が向いたらROOT5との比較もしよ
  うかと思います。

** とりあえず起動

   #+begin_src sh
$ cd ~/TEST/root6/tutorials/
$ root

root[0]
   #+end_src

   コマンドラインで「root」と入力すると、ROOTが起動します。
   この状態だと、対話的にROOTを操作することができます。

** とりあえず終了

   #+begin_src sh
root [0] .q
   #+end_src

   ROOTセッション内で「.q」を入力すると、ROOTが終了します。
   それで終了しない場合は、「.qqq・・・」の様にqをたくさんにします。

*** rootlogon.Cとrootlogoff.C

    さて、tutorials をコピーしたディレクトリでROOTを起動／終了すると、
    以下の様なメッセージが表示されたはずです。

   #+begin_src bash
Welcome to the ROOT tutorials

Type ".x demos.C" to get a toolbar from which to execute the demos

Type ".x demoshelp.C" to see the help window

==> Many tutorials use the file hsimple.root produced by hsimple.C
==> It is recommended to execute hsimple.C before any other script

root [0]
   #+end_src

    #+begin_src bash
Taking a break from ROOT? Hope to see you back!
   #+end_src

    これは、同じディレクトリに、「rooglogon.C」と「rootlogoff.C」があるからです。
    この２つのファイルを用意しておくことで、ROOT起動時および終了時の動作を設定することができます。

    個人的には、数ヶ月ぶりに触るプログラムなんてほとんど忘れてしまっているので、
    rootlogon.C に手順を書いて残したりしています。

*** ROOT起動時に読み込まれるファイルの順番

    ROOT起動時に以下の順番でファイルが読み込まれます。

   1. system.rootrc
   2. ~/.rootrc
   3. ./rootlogon.C

   個人的な全体設定は「~/.rootrc」へ、そのプログラムだけの設定は「./rootlogon.C」に書いておけばよいです。

** demos.Cを実行してみる

   さて、ROOTを起動して表示されたメッセージにしたがって、demos.C を実
   行してみましょう。ROOT内で実行する場合は、「.x ファイル名」と入力し
   ます。ファイル名の部分はTAB補完ができます。これをbashで実行する場合
   は以下のようにします。

   #+begin_src sh
$ root demos.C
   #+end_src

   さてさて、実行すると図[[fig:demos]]のようなツールバーが出てきます。

   #+attr_latex: :height 10cm
   #+name: fig:demos
   #+caption: demos.Cを実行した時に出てくるツールバー的なもの
   [[./fig/demos.png]]


   一番上にある、「Help Demos」をクリックすると、図[[fig:helpdemos]]のよう
   なキャンバスが表示されます。

   #+attr_latex: :height 10cm :mode hoge
   #+name: fig:helpdemos
   #+caption: Help Demos を実行すると出てくるキャンバス
   [[./fig/helpdemos.png]]

   とりあえずこの通りにボタンを押してみましょう。

** hsimple.Cを実行してみる

   #+begin_src sh
$ root hsimple.C
   #+end_src

   前節のようにボタンを押して実行するか、上の行の様にコマンドラインか
   ら「hsimple.C」を走らせると、キャンバスが表示され、ヒストグラムが成
   長していきます。それと同時に、「hsimple.root」というROOTファイルが
   作成されます。

   「hsimple.C」を開いて、上から順番に何をしているのかを確認してみましょ
   う。

*** インクルードファイル

    とりあえず無視してOKです。コンパイルする場合は必要ですが、マクロで
    動かす場合は書かなくてもよいです。

# #+include: "./root6/tutorials/hsimple.C" src c++ :lines "1-12"

#+begin_src c++
#include <TFile.h>
#include <TNtuple.h>
#include <TH2.h>
#include <TProfile.h>
#include <TCanvas.h>
#include <TFrame.h>
#include <TROOT.h>
#include <TSystem.h>
#include <TRandom3.h>
#include <TBenchmark.h>
#include <TInterpreter.h>
#+end_src

*** 関数の定義

    マクロの場合ファイル名と関数名は一緒にします。
    戻り型はなんでもOKです。引数を指定することもできます。
#+begin_src c++
TFile *hsimple(Int_t get=0)
#+end_src

*** コメントの挿入

    コメントはC++の作法で挿入できます

#+begin_src c++
{
//  This program creates :
//    - a one dimensional histogram
//    - a two dimensional histogram
//    - a profile histogram
//    - a memory-resident ntuple
//
//  These objects are filled with some random numbers and saved on a file.
//  If get=1 the macro returns a pointer to the TFile of "hsimple.root"
//          if this file exists, otherwise it is created.
//  The file "hsimple.root" is created in $ROOTSYS/tutorials if the caller has
//  write access to this directory, otherwise the file is created in $PWD
#+end_src

*** ファイル名の宣言

    TStringクラスという文字列クラスを使っています。
    普通のC/C++の関数を使うよりはるかに楽なので、積極的に使うと良いと思います。

#+begin_src c++
   TString filename = "hsimple.root";
   TString dir = gSystem->UnixPathName(__FILE__);
   dir.ReplaceAll("hsimple.C","");
   dir.ReplaceAll("/./","/");
   TFile *hfile = 0;
   if (get) {
      // if the argument get =1 return the file "hsimple.root"
      // if the file does not exist, it is created
      TString fullPath = dir+"hsimple.root";
      if (!gSystem->AccessPathName(fullPath,kFileExists)) {
         hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials
         if (hfile) return hfile;
      }
      //otherwise try $PWD/hsimple.root
      if (!gSystem->AccessPathName("hsimple.root",kFileExists)) {
         hfile = TFile::Open("hsimple.root"); //in current dir
         if (hfile) return hfile;
      }
   }
   //no hsimple.root file found. Must generate it !
   //generate hsimple.root in current directory if we have write access
   if (gSystem->AccessPathName(".",kWritePermission)) {
      printf("you must run the script in a directory with write access\n");
      return 0;
   }
#+end_src

*** ROOTファイルを開く

    TFileクラスを使います。直前のif文の中ではファイルの存在を確認して
    います。ファイルがある場合は、TFile::Openメソッドでファイルを開い
    ています。ない場合は、TFile::TFileコンストラクタで新しいTFileオブ
    ジェクトを作成しています。

#+begin_src c++
   TFile *hfile = 0;

   hfile = TFile::Open(fullPath); //in $ROOTSYS/tutorials
   hfile = TFile::Open("hsimple.root"); //in current dir

   hfile = (TFile*)gROOT->FindObject(filename); if (hfile) hfile->Close();
   hfile = new TFile(filename,"RECREATE","Demo ROOT file with histograms");
#+end_src

*** ヒストグラムを作成する

    TH1クラス、TH2クラスなどを使います。
    ここでは、TProfileクラスやTNtupleクラスも使われています。

#+begin_src c++
   // Create some histograms, a profile histogram and an ntuple
   TH1F *hpx = new TH1F("hpx","This is the px distribution",100,-4,4);
   hpx->SetFillColor(48);
   TH2F *hpxpy = new TH2F("hpxpy","py vs px",40,-4,4,40,-4,4);
   TProfile *hprof = new TProfile("hprof","Profile of pz versus px",100,-4,4,0,20);
   TNtuple *ntuple = new TNtuple("ntuple","Demo ntuple","px:py:pz:random:i");
#+end_src

*** プロセス時間の測定開始

    このマクロを実行すると、ターミナル上にプロセス時間が表示されます。
    この部分から測定を開始しています。

#+begin_src c++
   gBenchmark->Start("hsimple");
#+end_src

*** キャンバスの作成

    グラフを描く領域をキャンバスと呼びます。TCanvasクラスを使います。

#+begin_src c++
   // Create a new canvas.
   TCanvas *c1 = new TCanvas("c1","Dynamic Filling Example",200,10,700,500);
   c1->SetFillColor(42);
   c1->GetFrame()->SetFillColor(21);
   c1->GetFrame()->SetBorderSize(6);
   c1->GetFrame()->SetBorderMode(-1);
#+end_src

*** ヒストグラムに値を詰める

    このマクロでは、ヒストグラムにランダムな値を詰め込んでいます。

#+begin_src c++
   // Fill histograms randomly
   TRandom3 random;
   Float_t px, py, pz;
   const Int_t kUPDATE = 1000;
   for (Int_t i = 0; i < 25000; i++) {
      random.Rannor(px,py);
      pz = px*px + py*py;
      Float_t rnd = random.Rndm(1);
      hpx->Fill(px);
      hpxpy->Fill(px,py);
      hprof->Fill(px,pz);
      ntuple->Fill(px,py,pz,rnd,i);
#+end_src

*** キャンバスに描画する

    TH1::Draw()メソッドで描画します。

#+begin_src c++
      if (i && (i%kUPDATE) == 0) {
         if (i == kUPDATE) hpx->Draw();
         c1->Modified();
         c1->Update();
         if (gSystem->ProcessEvents())
            break;
      }
   }
#+end_src

*** プロセス時間の表示

#+begin_src c++
   gBenchmark->Show("hsimple");
#+end_src

*** ROOTファイルに保存する

#+begin_src c++
   // Save all objects in this file
   hpx->SetFillColor(0);
   hfile->Write();
   hpx->SetFillColor(48);
   c1->Modified();
   return hfile;

// Note that the file is automatically close when application terminates
// or when the file destructor is called.
}
#+end_src




* TLegend／TText編



* その他

  ここでは、ROOT以外の研究で役に立ちそうなことについてまとめます。

** Emacs

   最初に断っておくと、特に「Emacs信者」というわけではないです。Emacs
   しか使えない、ただのポンコツ[fn::Vimも基本操作はできるようにし
   といた方がよいと思っています]です。
   ただし、プログラミングを快適に行うにあたって「自分に合ったエディタ」
   を選択するというのは重要なことだと思います。思った以上に長いお付き
   合いになるので、愛着を持てるエディタを選びましょう。

   僕の場合は修士でプログラミングを始めた時に、最初に触ったのがEmacsだっ
   たというのが主な理由[fn::MacのCocoaアプリもEmacsキーバインドで使え
   るのも大きな理由だったかも]ですけどね。最初はこれまで使っていたテキ
   ストエディタ[fn::Wordやメモ帳]と同じように矢印キーなどで操作してい
   ました。ウェブなどでキーバインドを確認しながら、だんだんと操作方法
   を覚えていった気がします。

   最近では[[https://github.com/bbatsov/guru-mode][ guru-mode]] なるパッケージもあるので、これを入れて練習したら
   いいと思います。マニュアルにある通りにインストールして、(setq
   guru-warn-only t)にして使うとよいです。矢印キーなどを押すとミニバッ
   ファに適切なキーバインドが表示されるので、使いながら覚えるのにピッ
   タリです。後述するPreludeにはデフォルトで入っています（というか同じ
   作者）。


*** Emacsの学習コスト

   快適に操作をするためにある程度キーバインドを覚えないといけなかった
   り、カスタマイズしようと思うとElispの知識が必要だったり、と学習コス
   トは高め[fn::決して安くはない]です。

   プログラミングの統合開発環境には「Eclipse」や「Xcode」、文書作成に
   は「Word」だったり、TeXの統合環境には「EasyTeX」や「TeXShop」などが
   あります。これらは用途に特化していおり、便利になるように設計されて
   いるのですが、結局、各ソフト毎の操作を覚えなくてはいけないため、実
   は学習コストは同じくらいなんじゃないかなとも思います。


*** 基本操作

    操作方法を羅列するのは無意味なので、よく使う操作についてEmacs、vim、
    そしてlessを比較してみました。

**** ページ移動

     #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
     | Emacs      | vim     | less   | 操作内容                   |
     | C-n        | j, RET  | j, RET | 次の行                     |
     | C-p        | k       | k      | 前の行                     |
     | C-v        | C-f     | SPC    | １ページ進む               |
     | M-v        | C-b     | S-SPC  | １ページ戻る               |
     | M-<        | gg      | g      | ファイルの先頭             |
     | M->        | G       | G      | ファイルの最後             |
     | M-g g 数値 | 数値 G  | :数値  | 指定した数値の行へジャンプ |
     |            |         | d      | 半ページ進む               |
     |            |         | u      | 半ページ戻る               |
     | C-x C-c    | :q, :q! | q      | ファイルを閉じる           |

**** カーソル移動

     #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
     | Emacs | vim    | 操作内容                                                                               |
     | C-f   | l, SPC | 次の文字                                                                               |
     | C-b   | h      | 前の文字                                                                               |
     | M-f   | w, e   | 次の単語[fn::Emacsの場合、[[https://github.com/zk-phi/jaword][jawordパッケージ]] を導入すると日本語の単語移動が賢くなります] |
     | M-b   | b      | 前の単語                                                                               |
     | C-a   | 0      | 行頭                                                                                   |
     |       | ^      | 文頭（行頭にある文字）                                                                 |
     | C-e   | $      | 行末                                                                                   |
     | C-i   |        | タブ（インデント？）                                                                   |
     | C-l   |        | 画面の移動（上-中-下）                                                                 |

**** 切り貼り

     #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
     | Emacs | vim        | 操作内容                             |
     | C-k   | d$         | カーソルの位置から行末までを切り取り |
     | C-w   | d$, dd, dw | 選択範囲を切り取り                   |
     |       | dd         | 一行削除（切り取り）                 |
     |       | dw         | １単語を切り取り                     |
     |       | d$, d^, d0 | それぞれ切り取り                     |
     | M-w   | y          | 選択範囲をコピー（yank）             |
     |       | yy         | 一行コピー（yank）                   |
     |       | yw         | １単語をコピー（yank）               |
     |       | y$, y^, y0 | それぞれコピー（yank）               |
     | C-y   | p          | 貼り付け                             |
**** 検索

     #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
     | Emacs | vim            | 操作内容                                                                                                                                                                                |
     | C-s   | /文字, n, C-i  | 前方検索 [fn::Emacsの場合、[[https://github.com/koron/cmigemo][cmigemo]] と [[https://github.com/emacs-jp/migemo][migemoパッケージ]] を導入するとローマ字で日本語検索が可能になります。インストールと設定の詳細は [[http://rubikitch.com/2014/08/20/migemo/][るびきち「日刊Emacs」]] を参考にするとよいと思います] |
     | C-r   | ?文字, N, C-o  | 後方検索                                                                                                                                                                                |
     | C-@   | v              | マーカーのセット                                                                                                                                                                        |
     | M-%   | :s/old/new     | 現在行の最初の文字を置換（old -> new）                                                                                                                                                  |
     |       | :s/old/new/g   | 現在行のすべての文字を置換（old -> new）                                                                                                                                                |
     |       | :%s/old/new/gc | ファイル全体のすべての文字を、確認しながら置換                                                                                                                                          |

**** ファイル操作

     #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
     | Emacs                                       | vim           | 操作内容                              |
     | C-x C-s                                     | :w            | ファイルを保存                        |
     | C-x C-w                                     | :w ファイル名 | ファイル名を指定して保存              |
     | C-x C-i                                     | :r ファイル名 | ファイル名の中身を挿入                |
     | C-d                                         | x             | カーソルの下の文字を削除（Delete）    |
     | C-h[fn::元々はHelpですが、置き換えています] | Backspace     | カーソルの左の文字を削除（Backspace） |



**** エディタ特有

    #+ATTR_LATEX: :environment longtable :align |l|l|l|l|
    | Emacs | vim       | 操作内容                                     |
    |       | ESC       | ノーマルモードへ切替                         |
    |       | i         | カーソルの位置に追加                         |
    |       | a         | カーソルの次の位置に追加                     |
    |       | A         | 行末に追加                                   |
    |       | I         | 行頭に追加                                   |
    |       | o         | カーソルの下の行に追加                       |
    |       | O         | カーソルの上の行に追加                       |
    | C-j   |           | 改行                                         |
    | C-o   |           | 改行                                         |
    | C-m   |           | 改行                                         |
    | RET   |           | 改行                                         |
    | C-x u | u         | 直前の動作の取り消し                         |
    |       | U         | 行全体の変更の取り消し                       |
    |       | C-r       | 取り消しの取り消し                           |
    |       | r         | カーソル下の１文字の置換                     |
    |       | R         | カーソル下の複数文字の置換                   |
    |       | cw        | カーソル位置の単語の変更（削除＋挿入）       |
    |       | c$        | カーソル位置から行末までの変更（削除＋挿入） |
    |       | c0        | カーソル位置から行頭までの変更（削除＋挿入） |
    |       | c^        | カーソル位置から文頭までの変更（削除＋挿入） |
    |       | C-g       | ファイル内の位置の表示                       |
    |       | %         | 対応するカッコへ移動                         |
    |       | !コマンド | 外部コマンドを実行                           |


*** キーボード設定

    Emacsを快適に操作するためには、少しだけキーボード設定をした方が良
    いと思います。あんまり変えすぎちゃうと、他のPCを使うときやPCを買い
    替えた時の再設定がめんどくさくなるので、ほどほどに。

    私の場合は以下の３点を変更しています。

    |                          | 変更前                   | 変更後                   |
    |--------------------------+--------------------------+--------------------------|
    | Controlキーの追加        | CapsLock                 | Control                  |
    | Spotlight検索            | Control + Space          | Option + Command + Space |
    | Select next input source | Option + Command + Space | OFF                      |


    #+attr_latex:  :width 0.7\textwidth
    #+caption: CapsLock \rightarrow Controlに変更
    [[./fig/mac-keyboard04.png]]

    #+attr_latex:  :width 0.7\textwidth
    #+caption: スポットライト検索のショートカットキーを変更する前。デフォルトは「Control + Space」
    [[./fig/mac-keyboard01.png]]

    #+attr_latex:  :width 0.7\textwidth
    #+caption: スポットライト検索のショートカットキーを「Option + Command + Space」に変更。重複するキーがあるため黄色い警告がでている
    [[./fig/mac-keyboard02.png]]

    #+attr_latex:  :width 0.7\textwidth
    #+caption: 「Select next source in input menu」なんてショートカットキーはこれまで使ったことない。なので無効にしても問題ない
    [[./fig/mac-keyboard03.png]]

*** Emacs + Org

    Emacs標準の「アウトラインモード」ですが、それ以上のことがたくさん
    できます。このKumaROOTもOrg-modeで作成しています[fn::Org-modeから
    LaTeXにエクスポート \rightarrow YaTeX環境でコンパイルしています。
    すべての作業がEmacs内でできるので大変便利です]。とても多機能なので、
    詳しくは「M-x org-info」でドキュメントを参照してください。

    ここでは、このKumaROOTを作成する際に必要だったことをメモする感じにします。

**** LaTeXエクスポートの設定

     pLaTeX（pTeX系）とpdfLaTeX（pdfTeX系）を使う場合を紹介しておきま
     す。日本語を使う場合、現在はpLaTeX（+dvipdfmx）を使う設定が簡単だ
     と思います。でも、調べてみると世の中はpdfLaTeXに向かっている気も
     するので、合わせて紹介しておきます。

     この辺は調べだすとキリがないので、軽い気持ちで選んだらいいと思い
     ます。

***** pLaTeXを使う場合

***** pdfLaTeXを使う場合

**** LaTeXエクスポートコマンド
     `C-c C-e l l     (`org-latex-export-to-latex')'
     `C-c C-e l p     (`org-latex-export-to-pdf')'

**** 使うクラスの指定

     org-latex-classes の中にあるクラスを使うことができる。
     新しいクラスを使いたい場合は、この alist に追加する必要がある。

     org-latex-default-classでデフォルトで使うクラスを指定できる。
     デフォルトは article。

     #+begin_src sh
#+latex_class: jsarticle
#+latex_class_options: [12pt]
#+latex_header: \usepackage{hoge}
     #+end_src

**** 脚注の挿入
**** 画像の挿入

     説明なしのリンクは画像として挿入される。
     挿入のときのオプションは「#+ATTR_LATEX:」で指定できる。
     画像の大きさは「:width 5cm」、「:height 10cm」のようにキーワード指定できる。
     他は「:options angle=90」のように :option キーワードで指定できる。
     キャプションは「#+caption:」で指定できる。

     まぁ、くどくど説明するより、以下のOrg文書での入力内容
     （[[src:image-input-in-org]]）と、それをLaTeXエクスポートしたときの出力内容
     （[[src:image-output-in-latex]]）を見てもらった方が早いと思います。

     #+caption: Org文書での入力内容
     #+name: src:image-input-in-org
     #+begin_src sh
#+attr_latex:  :width 0.7\textwidth
#+caption: CapsLock \rightarrow Controlに変更
[[./fig/mac-keyboard04.png]]
    #+end_src

     #+caption: LaTeXエクスポートしたときの出力内容
     #+name: src:image-output-in-latex
     #+begin_src latex
\begin{figure}[htb]
\centering
\includegraphics[width=0.7\textwidth]{./fig/mac-keyboard04.png}
\caption{CapsLock $\rightarrow$ Controlに変更}
\end{figure}
     #+end_src

**** 表の挿入

*** Emacs + Prelude

    Emacsの設定を一からするのってめんどくさいですよね。
    そんな場合はとりあえずググってみましょう。いろんな人が、いろんな形で公開しています。

    Preludeもその１つで、GitHubで公開されています。いろいろあって違い
    がよく分からなかったので、名前がかっこいいなーと思ってこれに決めま
    した。ほんとそれだけです。

    複数のマシンで同じEmacs設定を使いたい場合は、Preludeを自分のGitHub
    にForkして、Cloneするとよいと思います。

** LaTeX

   ほとんどの人は修論の時にLaTeXをがしがし使うことになると思います。そ
   の時に「インストールできないー」などと焦っていては時既に時間切れ
   [fn::ピンと来ない人は「ブロント語」でググってください]なので、簡単
   にまとめておきます。

*** MacTeXを使おう

    MacOSXでLaTeXを使う場合は、これで決まりです。
    TeX環境の本体であるTeXLiveと一緒に、TeX編集の統合環境である
    TeXShop[fn::修論の頃はお世話になりました。現在はYaTeXに移行したの
    で全く使っていません]やTeXworks、TeX関連のパッケージ管理ツールであ
    るTeX Live Utility[fn::コマンドラインからtlmgrとして使えます。パッ
    ケージのインストールがとても楽ちん。ただし、TeXLiveのバージョンが上
    がるたびに動かなくなるのでちょっとめんどくさい]、文献管理のBibDesk、
    スペルチェックのExcalibur、そして、Keynoteに数式を貼り付けるのに必
    要なLaTeXiT[fn::これが一番重宝してます]もついてきます。

**** 日本語とLaTeX

     日本語はマルチバイトコードであるため、LaTeXでコンパイルするのが難
     しかったみたいです。それに対処する歴史的な紆余曲折から日本語版
     LaTeXにはさまざまな派生品が存在します。この歴史の詳細に関しては、
     三重大学の奥村さんのウェブサイトをはじめ、ググってみるとよいでしょ
     う。

     つい最近までは「Mac LaTeX インストール」などでググると、なんだか
     まとまりのない情報で溢れていました。しかし、現在はそれらを取りま
     とめようということで開発が進んでいるようで、これからはTeXLive一択
     で良いみたいです。

     TeXLiveはMacPortsからインストールすることもできますが、うまく設定
     できた試しがありません。なので、[[https://tug.org/mactex/][MacTeX公式ページ]] に置いてある
     MacTeXパッケージをダウンロード[fn::フルパッケージは2GBちょいあるの
     で、ダウンロードに少し時間がかかります。細い回線で行うのはオススメ
     しません]するのが一番簡単で良いと思います。


*** ptex2pdf を使おう

    日本語のLaTeX文書をコンパイルするにはpLaTeXコマンドを使います。コ
    ンパイルが成功するとdviファイルが作成されるので、dvipdfmxコマンド
    を使ってPDFファイルに変換します。

    これをまとめてやってくれるのがptex2pdfコマンドで、（おそらく）
    MacTeXをインストールすると勝手についてきます。ただのシェルスクリプ
    トなので、気になる人は中を見てみるとよいでしょう。


*** YaTeXを使おう

    MacTeXをインストールするとTeXShop.appがついてきます。
    すぐに使えるので、時間に余裕がないときはこちらを使うと良いでしょう。

    設定に時間を割けるようであれば、Emacs+YaTeXをおすすめします。YaTeX
    の設定や操作コマンドを覚えるための時間は必要ですが、ある程度慣れて
    しまえば編集作業が格段に捗るはずです。

    http://ichiro-maruta.blogspot.jp/2013/03/latex.html
    http://qiita.com/zr_tex8r/items/5413a29d5276acac3771


*** pdfLaTeX

*** jsarticleドキュメントクラス

     #+begin_src latex
\documentclass[dvipdfmx,12pt]{jsarticle}
     #+end_src

    日本語のLaTeX文書にはjsarticleドキュメントクラスを使います。
    ドライバはdvipdfmxを使います。

*** graphicxパッケージ

     #+begin_src latex
\usepackage[hiresbb]{graphicx}
     #+end_src

    画像を扱う場合はgraphicxパッケージを使います。
    ドライバはdvipdfmxを使います。ドキュメントクラス指定時に宣言していてれば、ここで指定する必要はありません。
    画像のバウンディングボックスに「HiResBoundingBox」を使う場合は、hiresbbオプションを付けておきます。

*** hyperrefパッケージ

    LaTeX文書内にハイパーリンクを置く場合には、hyperrefパッケージを使うとよい。
    しかし、日本語のドキュメントクラスを使うとページから文章がはみ出たり、目次のしおりが文字化けしたりするので、以下のように対処する必要がある。

**** PXjahyperパッケージも読み込む

     #+begin_src latex
\usepackage{pxjahyper}
     #+end_src

     PXjahyperパッケージを読み込んでおけば、万事解決するみたい。
     それでも解決しない場合は、以下のように個別に対処する。

**** ページサイズ対策

     #+begin_src latex
\hypersetup{setpagesize=false}
     #+end_src

**** しおりの文字化け対策

     #+begin_src latex
\usepackage{atbegshi}
\AtBeginShipoutFirst{\special{pdf:tounicode EUC-UCS2}}
\AtBeginShipoutFirst{\special{pdf:tounicode 90ms-RKSJ-UCS2}}
     #+end_src

     何をしてくのか全く分かっていないけれど、両方書いておけばいい。
     それでだめな場合は片方にする。

** KiNOKO

   CAMACやVMEでデータ収集を行うためのドライバをインストールします。
   詳細に関しては「[[http://www.awa.tohoku.ac.jp/~sanshiro/kinoko/index.html][KiNOKOプロジェクト]]」を参照してください。

#+begin_src sh
$ cd ~/Downloads/
$ wget http://www.awa.tohoku.ac.jp/~sanshiro/kinoko-download/files/kinoko-2014-01-29.tar.gz
$ tar zxvf kinoko-2014-01-29.tar.gz /usr/local/heplib/
#+end_src

   僕の場合、ダウンロードしたファイルはとりあえず ~/Downloads に保存することにしています。
   また、高エネルギー物理関連のプログラムは /usr/local/heplib/ 以下にインストールすることにしています。

*** CAMACドライバのインストール

*** VMEドライバのインストール

** Geant4
