* Emacsの使い方

  エディタはプログラミングを楽にするための道具です。
  自分に合ったものを選ぶのが一番です。
  その参考になるように、Emacsの簡単な使い方と、
  便利なパッケージなどを紹介しておきます。

** インストール

   MacOS Xにインストールする場合、[[http://emacsformacosx.com][Emacs For MacOS X]]から
   既にビルドされたものを取ってくるのが一番です。

** Emacs + Prelude

   Emacsは設定をきちんとしないと便利になりません。
   それを一から設定するのも面白いのですが、それはなかなかめんどくさいです。
   そんなめんどくさがり屋さんのために（？）、
   GitHubで公開されているEmacs初期設定集があります。
   （ありがたや、ありがたや）

   [[https://github.com/bbatsov/prelude][Prelude]] はそのひとつです。
   他にも、[[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]] や [[https://github.com/eschulte/emacs24-starter-kit][emacs24-starter-kit]] など探せばいろいろありますが、
   名前がオシャレだなと思ったので、Prelude に決めました。

*** Preludeのインストール

    PreludeはGitHubから取ってくることができます。
    しかし、本家リポジトリを直接cloneしてしまうと、
    自分の変更をpushしたときに大変なことになるので、
    自分のGitHubにforkしたリポジトリをcloneすることにします。

    ただし、本家の更新も取り込みたいので、
    いつでも参照できるように専用のブランチを作ります。

#+begin_src bash
$ cd ~/repos/github/
$ git clone https://github.com/shotakaha/prelude
$ export PRELUDE_URL="https://github.com/yourname/prelude.git" && curl -L https://github.com/bbatsov/prelude/raw/master/utils/installer.sh | sh
#+end_src


*** init.elの内容

*** core の内容


** Emacs vs Vim

   巷では =Emacs= vs =Vim= 戦争というのが昔からあるそうで、よくネタになっています。
   ですが、僕自身は特に「Emacs信者」というわけではないです。
   Emacsしか使えない、ただのポンコツです。
   Vimの基本操作もできるようにしといた方がいいと思っています。

   ただし、この章のはじめにも書きましたが、快適なプログラミングを行うにあたって
   「自分に合ったエディタ」を選択するというのは重要なことだと思います。
   思った以上に長いお付き合いになるので、愛着を持てるエディタを選びましょう。

   僕の場合は修士でプログラミングを始めた時に、
   最初に触ったのがEmacsだったというのが主な理由です。
   Mac（のCocoaアプリ）もEmacsキーバインドで移動ができるのも大きな理由でした。

   最初はこれまで使っていたテキストエディタと
   同じように矢印キーなどで操作していました。
   ウェブなどでキーバインドを確認しながら、
   だんだんと操作方法を覚えていった気がします。

   最近では [[https://github.com/bbatsov/guru-mode][guru-mode]] なるパッケージもあるので、これを入れて練習したらいいと思います。
   マニュアルにある通りにインストールして、
   =(setq guru-warn-only t)= するだけで有効になります。
   矢印キーなどを押すとミニバッファに適切なキーバインドが表示されるので、
   使いながら覚えるのにピッタリです。
   後述するPreludeにはデフォルトで入っています（というか同じ作者みたい）。


** Emacsの学習コスト

   快適に操作をするためにある程度キーバインドを覚えないといけなかったり、
   カスタマイズしようと思うとElispの知識が必要だったり、
   と学習コストは高め（決して安くはない）です。

   プログラミングの統合開発環境には =Eclipse= や =Xcode= 、
   文書作成には =Word= だったり、
   TeXの統合環境には =EasyTeX= や =TeXShop= などがあります。
   これらはそれぞれの用途に特化していて、便利になるように設計されているのですが、
   結局、各ソフト毎の操作を覚えなくてはいけないため、
   実は学習コストは同じくらいなんじゃないかなとも思います。

*** 基本操作

    操作方法を羅列するのは無意味なので、
    よく使う操作について =Emacs= 、 =vim= 、
    そして =less= を比較してみました。

**** ページ移動

     | Emacs        | vim          | less        | 操作内容                   |
     |--------------+--------------+-------------+----------------------------|
     | =C-n=        | =j= , =RET=  | =j= , =RET= | 次の行                     |
     | =C-p=        | =k=          | =k=         | 前の行                     |
     | =C-v=        | =C-f=        | =SPC=       | １ページ進む               |
     | =M-v=        | =C-b=        | =S-SPC=     | １ページ戻る               |
     | =M-<=        | =gg=         | =g=         | ファイルの先頭             |
     | =M->=        | =G=          | =G=         | ファイルの最後             |
     | =M-g g 数値= | =数値 G=     | =:数値=     | 指定した数値の行へジャンプ |
     |              |              | =d=         | 半ページ進む               |
     |              |              | =u=         | 半ページ戻る               |
     | =C-x C-c=    | =:q= , =:q!= | =q=         | ファイルを閉じる           |

**** カーソル移動

     | Emacs | vim         | 操作内容               |
     |-------+-------------+------------------------|
     | =C-f= | =l= , =SPC= | 次の文字               |
     | =C-b= | =h=         | 前の文字               |
     | =M-f= | =w= , =e=   | 次の単語               |
     | =M-b= | =b=         | 前の単語               |
     | =C-a= | =0=         | 行頭                   |
     |       | =^=         | 文頭（行頭にある文字） |
     | =C-e= | =$=         | 行末                   |
     | =C-i= |             | タブ（インデント？）   |
     | =C-l= |             | 画面の移動（上-中-下） |

     - Emacsの場合、[[https://github.com/zk-phi/jaword][jawordパッケージ]] を導入すると日本語の単語移動が賢くなります。

**** 切り貼り

     | Emacs | vim                | 操作内容                             |
     |-------+--------------------+--------------------------------------|
     | =C-k= | =d$=               | カーソルの位置から行末までを切り取り |
     | =C-w= | =d$= , =dd= , =dw= | 選択範囲を切り取り                   |
     |       | =dd=               | 一行削除（切り取り）                 |
     |       | =dw=               | １単語を切り取り                     |
     |       | =d$= , =d^= , =d0= | それぞれ切り取り                     |
     | =M-w= | =y=                | 選択範囲をコピー（yank）             |
     |       | =yy=               | 一行コピー（yank）                   |
     |       | =yw=               | １単語をコピー（yank）               |
     |       | =y$= , =y^= , =y0= | それぞれコピー（yank）               |
     | =C-y= | =p=                | 貼り付け                             |

**** 検索

     | Emacs | vim                   | 操作内容                                       |
     |-------+-----------------------+------------------------------------------------|
     | =C-s= | =/文字= , =n= , =C-i= | 前方検索                                       |
     | =C-r= | =?文字= , =N= , =C-o= | 後方検索                                       |
     | =C-@= | =v=                   | マーカーのセット                               |
     | =M-%= | =:s/old/new=          | 現在行の最初の文字を置換（old -> new）         |
     |       | =:s/old/new/g=        | 現在行のすべての文字を置換（old -> new）       |
     |       | =:%s/old/new/gc=      | ファイル全体のすべての文字を、確認しながら置換 |

     - Emacsの場合、[[https://github.com/koron/cmigemo][cmigemo]] と [[https://github.com/emacs-jp/migemo][migemoパッケージ]] を導入するとローマ字で日本語検索が可能になります。
     - インストールと設定の詳細は [[http://rubikitch.com/2014/08/20/migemo/][るびきち「日刊Emacs」]] を参考にするとよいと思います。

**** ファイル操作

     | Emacs                | vim             | 操作内容                              |
     |----------------------+-----------------+---------------------------------------|
     | =C-x C-s=            | =:w=            | ファイルを保存                        |
     | =C-x C-w ファイル名= | =:w ファイル名= | ファイル名を指定して保存              |
     | =C-x C-i ファイル名= | =:r ファイル名= | ファイル名の中身を挿入                |
     | =C-d=                | =x=             | カーソルの下の文字を削除（Delete）    |
     | =C-h=                | =Backspace=     | カーソルの左の文字を削除（Backspace） |

     - デフォルトだと =C-h= はヘルプですが、 =Backspace= に置き換えています。

**** エディタ特有

    | Emacs           | vim         | 操作内容                                     |
    |-----------------+-------------+----------------------------------------------|
    |                 | =ESC=       | ノーマルモードへ切替                         |
    |                 | =i=         | カーソルの位置に追加                         |
    |                 | =a=         | カーソルの次の位置に追加                     |
    |                 | =A=         | 行末に追加                                   |
    |                 | =I=         | 行頭に追加                                   |
    |                 | =o=         | カーソルの下の行に追加                       |
    |                 | =O=         | カーソルの上の行に追加                       |
    | =C-j=           |             | 改行                                         |
    | =C-o=           |             | 改行                                         |
    | =C-m=           |             | 改行                                         |
    | =RET=           |             | 改行                                         |
    | =C-x u= , =C-/= | =u=         | 直前の動作の取り消し                         |
    |                 | =U=         | 行全体の変更の取り消し                       |
    |                 | =C-r=       | 取り消しの取り消し                           |
    |                 | =r=         | カーソル下の１文字の置換                     |
    |                 | =R=         | カーソル下の複数文字の置換                   |
    |                 | =cw=        | カーソル位置の単語の変更（削除＋挿入）       |
    |                 | =c$=        | カーソル位置から行末までの変更（削除＋挿入） |
    |                 | =c0=        | カーソル位置から行頭までの変更（削除＋挿入） |
    |                 | =c^=        | カーソル位置から文頭までの変更（削除＋挿入） |
    |                 | =C-g=       | ファイル内の位置の表示                       |
    |                 | =%=         | 対応するカッコへ移動                         |
    |                 | =!コマンド= | 外部コマンドを実行                           |


*** キーボード設定

    Emacsを快適に操作するためには、少しだけキーボード設定をした方が良
    いと思います。あんまり変えすぎちゃうと、他のPCを使うときやPCを買い
    替えた時の再設定がめんどくさくなるので、ほどほどに。

    私の場合は以下の３点を変更しています。

    |                          | 変更前                     | 変更後                     |
    |--------------------------+----------------------------+----------------------------|
    | Controlキーの追加        | =CapsLock=                 | =Control=                  |
    | Spotlight検索            | =Control + Space=          | =Option + Command + Space= |
    | Select next input source | =Option + Command + Space= | OFF                        |


**** キーボード設定変更のスクリーンショット

     - =CapsLock= を =Control= に変更

     [[./fig/mac-keyboard04.png]]

     - スポットライト検索のショートカットキーを変更する前。デフォルトは =Control + Space=
     [[./fig/mac-keyboard01.png]]

     - スポットライト検索のショートカットキーを =Option + Command + Space= に変更。重複するキーがあるため黄色い警告がでている
     [[./fig/mac-keyboard02.png]]

     - =Select next source in input menu= なんてショートカットキーはこれまで使ったことない。なので無効にしても問題ないはず
     [[./fig/mac-keyboard03.png]]
